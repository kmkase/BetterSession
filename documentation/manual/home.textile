h1. BetterSession module for Play!

BetterSession improves the current Play! session mechanism by making the session unique in the *Server-side*.

h2. Features

* Makes the session unique.
* Checks the session integrity with encryption of the data.
* Stores the date of creation of the session.

h2. How works?

Creates a cookie containing data session encrypted in the *Client-side*, the same data session are stored into a Cache and an embedded H2 DB in the *Server-side*.

If a two _users_ try to login with the same data session, BetterSession detects that is already a session with that data, then doesn't create the another session. If the session cookie is altered, then the session dies.

h3. Data Session

* Unique key to identify the session, e.g, username, email.
* Creation date.

h2. Getting Started

Add this module to your _dependecies.yml_ file, like any other Play! module.

bq. @play -> bettersession [version]@

BetterSession manages the session in two different ways:

* Storing data session only in the *client-side*.
* Storing data session both in *client-side* and *server-side*.

For storing data session both in *client-side* and *server-side*, set to @true@ the following property:

bq. @bettersession.enable=true@

In order to identify the session between Play! applications, set a prefix to already exiting property (key session).

bq. @application.session.cookie=PREFIX@

e.g.,

bq. @application.session.cookie=APP_NAME@

The _Time to Live_ of the session is configured with the following property.

bq. @application.session.maxAge=15mn@

The _Time to Live_ will be updated every time the Client makes a request to the Server.

p(note). _Time to Live_ is *required* if you have the property @bettersession.enable@ as @true@; otherwise the current session will exist forever.

h3. BetterSession Methods

BetterSession is designed to work with any Controller that uses authentication functions; e.g., Play! built-in Secure module.
In order to be unobtrusive, only add some methods to replace the Play! built-in session mechanism.

h4. createSession method

bq. @createSession(String value, Boolean remember)@

Creates the session with the params _*value*_ and if _*remember*_ is true, stores the session in the remember Cookie too.

Example,

bc. public static void authenticate(@Required String username, String password, boolean remember) throws Throwable {
    ...
    // Here is created the session and if remember is true the Cookie remember too
    BetterSession.createSession(username, remember);
    // Redirect to the original URL (or /)
    redirectToOriginalURL();
}

h4. dropSession method

bq. @dropSession()@

Drops the session and if the remember Cookie exists, it does too.

Example,

bc. public static void logout() throws Throwable {
    Security.invoke("onDisconnect");
    // Remove the session
    BetterSession.dropSession();
    ..
}

h4. existSession method

bq. @existSession(String value)@

Verifies if the session with this _*value*_ is already active:

Example,

bc. public static void authenticate(@Required String username, String password, boolean remember) throws Throwable {
    ...
    // -----
    // Check if the session with the value username is already stored
    if (Validation.hasErrors() || BetterSession.existSession(username)) {
        flash.keep("url");
        flash.error("logged_in");
        login();
    }
    ...
}

h4. isRememberCookieCreated method

bq. @isRememberCookieCreated()@

Checks if a _*remember cookie*_ was created.

Example,

bc. public static void login() throws Throwable {
    // This method verify if was created a remember Cookie and if it exists create the session again
    if (BetterSession.isRememberCookieCreated()) {
        BetterSession.renewSessionFromRememberCookie();
        redirectToOriginalURL();
    }
    flash.keep("url");
    render();
}

h4. renewSessionFromRememberCookie method

bq. @renewSessionFromRememberCookie()@

Creates the session again with the data session stored into the remember cookie.

Example,

bc. public static void login() throws Throwable {
    // This method verify if was created a remember Cookie and if it exists create the session again
    if (BetterSession.isRememberCookieCreated()) {
        BetterSession.renewSessionFromRememberCookie();
        redirectToOriginalURL();
    }
    flash.keep("url");
    render();
}

h4. isConnected method

bq. @isConnected()@

Checks if a session exists for the coming request.

Example,

bc. static void checkAccess() throws Throwable {
    // Authenticate
    if (!BetterSession.isConnected()) {
        flash.put("url", "GET".equals(request.method) ? request.url : "/"); // seems a good default
        login();
    }
    ...
}

h4. getSessionValue method

bq. @getSessionValue()@

Return the unique value that was stored into the session.

Example,

bc. public class Security extends SecureController.Security {
    ...
    static String connected() {
        return BetterSession.getSessionValue();
    }
    ...
}

bc. #{if controllers.Security.isConnected()}
    <p>connected as: <b>${controllers.Security.connected()}</b> <a href="@{SecureController.logout()}">Logout</a></p>
#{/if}

h4. connectedAt method

bq. @connectedAt()@

Return the Date when was stored the session in @long@ format.

Examples,

bc. public class Security extends SecureController.Security {
    ...
    static long connectedAt() {
        return BetterSession.connectedAt();
    }
    ...
}

bc. #{if controllers.Security.isConnected()}
    <p>${ new Date(controllers.Security.connectedAt()).format("HH:mm:ss dd-MMMM-yyyy") }</p>
#{/if}


h2. Clean out the sessions

In a development environment is annoying to wait a session expires, so that to make easy this process there's a route for cleaning out the sessions.

bq. http://localhost:9000/@clean-session

h2. Sample application

One sample demo is part of the distribution. Don’t forget to run play deps so that it resolves dependencies.

h2. Recommendations

The Play secret key is used to secure cryptographic functions, like the session signature. Your application must keep this key very secret.

@%prod.application.secret=c12d1c59af499d20f4955d07255ed8ea333@

You can use the play secret command to generate a new secure and random key. If you plan to distribute your application to several servers, remember to use the same key for all application instances!

h2. TODO

* Add the possibility to make its own implementation of BetterSessionHandler.java and SessionNotifiable.java
* Encrypt the session with more that one algorithm and add a secret word.

h2. Credits

Author. Omar García G.
